<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Windows下使用 Hexo+GitHub 搭建个人免费博客教程</title>
      <link href="/shi-yong-hexoandgithub-da-jian-ge-ren-mian-fei-bo-ke-jiao-cheng/"/>
      <url>/shi-yong-hexoandgithub-da-jian-ge-ren-mian-fei-bo-ke-jiao-cheng/</url>
      
        <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><h3 id="GitHub-Pages-是什么？"><a href="#GitHub-Pages-是什么？" class="headerlink" title="GitHub Pages 是什么？"></a>GitHub Pages 是什么？</h3><p>What is GitHub Pages? - GitHub Help<br><a href="https://docs.github.com/en/pages/getting-started-with-github-pages/about-github-pages">https://docs.github.com/en/pages/getting-started-with-github-pages/about-github-pages</a></p><p>GitHub Pages 是由 GitHub 官方提供的一种免费的静态站点托管服务，让我们可以在 GitHub 仓库里托管和发布自己的静态网站页面。</p><h3 id="Hexo-是什么？"><a href="#Hexo-是什么？" class="headerlink" title="Hexo 是什么？"></a>Hexo 是什么？</h3><p>官网：hexo.io<br>Hexo 是一个快速、简洁且高效的静态博客框架，它基于 Node.js 运行，可以将我们撰写的 Markdown 文档解析渲染成静态的 HTML 网页。</p><h3 id="Hexo-GitHub-文章发布原理"><a href="#Hexo-GitHub-文章发布原理" class="headerlink" title="Hexo + GitHub 文章发布原理"></a>Hexo + GitHub 文章发布原理</h3><p>在本地撰写 Markdown 格式文章后，通过 Hexo 解析文档，渲染生成具有主题样式的 HTML 静态网页，再推送到 GitHub 上完成博文的发布。</p><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p>Hexo 基于 Node.js，搭建过程中还需要使用 npm（Node.js 已带） 和 git，因此先搭建本地操作环境，安装 Node.js 和 Git。</p><h3 id="安装nodejs和Git"><a href="#安装nodejs和Git" class="headerlink" title="安装nodejs和Git"></a>安装nodejs和Git</h3><h4 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h4><p>Node.js：<a href="https://nodejs.org/zh-cn">https://nodejs.org/zh-cn</a><br><img src="/shi-yong-hexoandgithub-da-jian-ge-ren-mian-fei-bo-ke-jiao-cheng/nodejs%E4%B8%8B%E8%BD%BD.jpg" alt="Node下载界面"><br>Git：<a href="https://git-scm.com/downloads">https://git-scm.com/downloads</a><br><img src="/shi-yong-hexoandgithub-da-jian-ge-ren-mian-fei-bo-ke-jiao-cheng/git_%E4%B8%8B%E8%BD%BD.png" alt="Git下载界面_1"><br><img src="/shi-yong-hexoandgithub-da-jian-ge-ren-mian-fei-bo-ke-jiao-cheng/git_%E4%B8%8B%E8%BD%BD_1.png" alt="Git下载界面_2"></p><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><p>下载 Node.js 和 Git 程序并安装，一路点 “下一步” 按默认配置完成安装。</p><h4 id="验证安装"><a href="#验证安装" class="headerlink" title="验证安装"></a>验证安装</h4><p>安装完成后，Win+R 输入 cmd 并打开，依次输入 node -v、npm -v 和 git —version 并回车，如下图出现程序版本号即可。</p><h4 id="更换npm安装源"><a href="#更换npm安装源" class="headerlink" title="更换npm安装源"></a>更换npm安装源</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> config <span class="token builtin class-name">set</span> registry http://registry.npm.taobao.org<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="连接-Github"><a href="#连接-Github" class="headerlink" title="连接 Github"></a>连接 Github</h3><ol><li><p>如果没有Github账户的话，需要用你的邮箱注册一个账户,并按下图找到自己的用户名，比如我的是huangpei1993<br><img src="/shi-yong-hexoandgithub-da-jian-ge-ren-mian-fei-bo-ke-jiao-cheng/github_username.png" alt="获取用户名"></p></li><li><p>在电脑的任何目录下右键 -&gt; Git Bash Here，输入如下命令设置用户名和邮箱</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> config <span class="token parameter variable">--global</span> user.name <span class="token string">"用户名"</span><span class="token function">git</span> config <span class="token parameter variable">--global</span> user.email <span class="token string">"注册时的邮箱"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li>创建 SSH 密匙<br>输入 <code>bash ssh-keygen -t rsa -C "GitHub 邮箱"</code>，然后一路回车。</li><li>添加密匙<br>4.1 进入 [C:\Users\用户名.ssh] 目录（要勾选显示“隐藏的项目”），用记事本打开公钥 id_rsa.pub 文件并复制里面的内容。<br>4.2 登陆 GitHub ，进入 Settings 页面，选择左边栏的 SSH and GPG keys，点击 New SSH key。<br>4.3 Title 随便取个名字，粘贴复制的 id_rsa.pub 内容到 Key 中，点击 Add SSH key 完成添加。<br><img src="/shi-yong-hexoandgithub-da-jian-ge-ren-mian-fei-bo-ke-jiao-cheng/1668164769005.jpg" alt="添加SSH密匙_1"><br><img src="/shi-yong-hexoandgithub-da-jian-ge-ren-mian-fei-bo-ke-jiao-cheng/WX20221111-190751%402x.png" alt="添加SSH密匙_2"><h3 id="创建-Github-Pages-仓库"><a href="#创建-Github-Pages-仓库" class="headerlink" title="创建 Github Pages 仓库"></a>创建 Github Pages 仓库</h3>GitHub 主页右上角加号 -&gt; New repository：<br>Repository name 中输入 用户名.github.io<br>勾选 “Initialize this repository with a README”<br>Description 选填<br>填好后点击 Create repository 创建。<br><img src="/shi-yong-hexoandgithub-da-jian-ge-ren-mian-fei-bo-ke-jiao-cheng/WX20221111-191106%402x.png" alt="创建仓库_1"><br><img src="/shi-yong-hexoandgithub-da-jian-ge-ren-mian-fei-bo-ke-jiao-cheng/WX20221111-191254%402x.png" alt=""><br>创建后默认自动启用 HTTPS，博客地址为：<a href="https://用户名.github.io">https://用户名.github.io</a></li></ol><h3 id="本地安装-Hexo-博客程序"><a href="#本地安装-Hexo-博客程序" class="headerlink" title="本地安装 Hexo 博客程序"></a>本地安装 Hexo 博客程序</h3><p>新建一个文件夹用来存放 Hexo 工程，命名如下 hexo 。打开该文件夹，右键 -&gt; Git Bash Here。</p><h4 id="安装-Hexo"><a href="#安装-Hexo" class="headerlink" title="安装 Hexo"></a>安装 Hexo</h4><p>使用 npm 一键安装 Hexo 博客程序：<br></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> <span class="token parameter variable">-g</span> hexo-cli<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p></p><h4 id="Hexo-初始化和本地预览"><a href="#Hexo-初始化和本地预览" class="headerlink" title="Hexo 初始化和本地预览"></a>Hexo 初始化和本地预览</h4><ol><li>初始化Hexo<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo init      <span class="token comment"># 初始化</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>但是因为网络原因，这个过程会非常慢，我们改用下面的命令<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> clone https://gitee.com/weilining/hexo-starter.git 你的github用户名.github.io<span class="token builtin class-name">cd</span> 你的github用户名.github.io<span class="token function">git</span> submodule init<span class="token function">git</span> submodule update<span class="token function">npm</span> i<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>完成后依次输入下面命令，启动本地服务器进行预览：<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo g   <span class="token comment"># 生成页面</span>hexo s   <span class="token comment"># 启动预览</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>访问 <a href="http://localhost:4000，出现">http://localhost:4000，出现</a> Hexo 默认页面，本地博客安装成功！<br><img src="/shi-yong-hexoandgithub-da-jian-ge-ren-mian-fei-bo-ke-jiao-cheng/v2-1c3baeecf1ef3bec5c8ef3f14639f68b_1440w.webp.jpeg" alt="Hexo预览界面"></li><li>预览完成后，记得在命令行床后使用 Ctrl+C 关闭服务器</li></ol><p>Tips：如果出现页面加载不出来，可能是端口被占用了。Ctrl+C 关闭服务器，运行 hexo server -p 5000 更改端口号后重试。</p><h4 id="Hexo-博客文件夹目录结构"><a href="#Hexo-博客文件夹目录结构" class="headerlink" title="Hexo 博客文件夹目录结构"></a>Hexo 博客文件夹目录结构</h4><p><img src="/shi-yong-hexoandgithub-da-jian-ge-ren-mian-fei-bo-ke-jiao-cheng/WX20221111-185545%402x.png" alt="Hexo 博客文件夹目录结构"></p><h3 id="部署-Hexo-到-GitHub-Pages"><a href="#部署-Hexo-到-GitHub-Pages" class="headerlink" title="部署 Hexo 到 GitHub Pages"></a>部署 Hexo 到 GitHub Pages</h3><p>本地博客测试成功后，就是上传到 GitHub 进行部署，使其能够在网络上访问。<br>首先安装 hexo-deployer-git：<br></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-deployer-git <span class="token parameter variable">--save</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><br>然后修改 _config.yml 文件末尾的 Deployment 部分，修改成如下：<br><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">deploy:  type: <span class="token function">git</span>  repository: git@github.com:用户名/用户名.github.io.git  branch: master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><br>完成后运行 <code>bash hexo d</code> 将网站上传部署到 GitHub Pages。<p></p><p>完成！这时访问我们的 GitHub 域名 <a href="https://用户名.github.io">https://用户名.github.io</a> 就可以看到 Hexo 网站了，如果出现404页面，可以稍等1分钟后刷新页面。</p><h2 id="开始使用"><a href="#开始使用" class="headerlink" title="开始使用"></a>开始使用</h2><h3 id="发布文章"><a href="#发布文章" class="headerlink" title="发布文章"></a>发布文章</h3><ol><li>进入博客所在目录(即 用户名.github.io)，右键打开 Git Bash Here，创建博文<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>然后 source 文件夹中会出现一个 My New Post.md 文件，就可以使用 Markdown 编辑器在该文件中撰写文章了。</li><li>写完后运行下面代码将文章渲染并部署到 GitHub Pages 上完成发布。以后每次发布文章都是这三条条命令。<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo clean <span class="token comment"># 清空上次生成的文件，防止修改了文件后不生效</span>hexo g   <span class="token comment"># 生成页面</span>hexo d   <span class="token comment"># 部署发布</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li>也可以不使用命令自己创建 .md 文件，只需在文件开头手动加入如下格式 Front-matter 即可，写完后运行 hexo g 和 hexo d 发布。<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">---title: Hello World <span class="token comment"># 标题</span>date: <span class="token number">2019</span>/3/26 hh:mm:ss <span class="token comment"># 时间</span>categories: <span class="token comment"># 分类</span>- Diarytags: <span class="token comment"># 标签</span>- <span class="token environment constant">PS3</span>- Games---摘要<span class="token operator">&lt;</span><span class="token operator">!</span>--more--<span class="token operator">&gt;</span>正文<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="网站设置"><a href="#网站设置" class="headerlink" title="网站设置"></a>网站设置</h3>包括网站名称、描述、作者、链接样式等，全部在网站目录下的 _config.yml 文件中，参考【官方文档<a href="https://hexo.io/zh-cn/docs/configuration】按需要编辑。">https://hexo.io/zh-cn/docs/configuration】按需要编辑。</a></li></ol><h3 id="更换主题"><a href="#更换主题" class="headerlink" title="更换主题"></a>更换主题</h3><ol><li>可以看到，默认的Hexo个人界面是比较单调的，这时候我们可以使用别人已经做好的主题，给你的个人主页“装修”一番</li><li>在 【Themes | Hexo <a href="https://hexo.io/themes/】">https://hexo.io/themes/】</a> 选择一个喜欢的主题，比如我使用的是 hexo-theme-matery，进入网站目录(即 用户名.github.io)打开 Git Bash Here 下载主题：<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> clone <span class="token function">git</span> clone https://github.com/blinkfox/hexo-theme-matery.git themes/hexo-theme-matery<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>如果github用不了，可以使用我搬运的仓库<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">https://gitee.com/huangpei1993/hexo-theme-matery.git themes/hexo-theme-matery<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>然后修改 _config.yml 中的 theme 为新主题名称 hexo-theme-matery，发布。</li><li>预览新主题<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo g   <span class="token comment"># 生成页面</span>hexo s   <span class="token comment"># 启动预览</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>确认修改好之后，就可以部署到github主页上去了<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo clean <span class="token comment"># 清空上次生成的文件，防止修改了文件后不生效</span>hexo g   <span class="token comment"># 生成页面</span>hexo d   <span class="token comment"># 部署发布</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>效果如下<br><img src="/shi-yong-hexoandgithub-da-jian-ge-ren-mian-fei-bo-ke-jiao-cheng/WX20221111-191953%402x.png" alt=""></li><li>对新主题进行自定义<br>该主题的作者对怎样修改他的主题做了非常详细的说明，详情请参考<br>github: <a href="https://github.com/blinkfox/hexo-theme-matery">https://github.com/blinkfox/hexo-theme-matery</a><br>gitee: <a href="https://gitee.com/huangpei1993/hexo-theme-matery">https://gitee.com/huangpei1993/hexo-theme-matery</a><br>但是要注意一点，在如下图的主题配置项之后的内容需要在 用户名.github.io/themes/hexo-theme-matery 目录下的_config.yml进行配置！！！！！</li></ol><p>最后配置好之后不要忘记部署发布上github</p><h2 id="我的个人网站和Hexo项目"><a href="#我的个人网站和Hexo项目" class="headerlink" title="我的个人网站和Hexo项目"></a>我的个人网站和Hexo项目</h2><p>个人网站：<a href="https://huangpei1993.github.io">https://huangpei1993.github.io</a><br>Hexo项目仓库地址：<a href="https://gitee.com/huangpei1993/huangpei1993.github.io">https://gitee.com/huangpei1993/huangpei1993.github.io</a></p><p>如果你有任何的建议、意见或问题，欢迎随时和我联系。</p><h2 id="你可能还需要的内容"><a href="#你可能还需要的内容" class="headerlink" title="你可能还需要的内容"></a>你可能还需要的内容</h2><ol><li>将Hexo工程代码上传到Gitee或Github仓库，防止本地项目代码丢失</li><li>如何使用Markdown编写你的博客</li></ol><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://zhuanlan.zhihu.com/p/60578464">https://zhuanlan.zhihu.com/p/60578464</a><br><a href="https://www.jianshu.com/p/a409601734f1">https://www.jianshu.com/p/a409601734f1</a></p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> GitHub </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Tensorflow踩坑记</title>
      <link href="/tensorflow-cai-keng-ji/"/>
      <url>/tensorflow-cai-keng-ji/</url>
      
        <content type="html"><![CDATA[<h2 id="2022-11-15"><a href="#2022-11-15" class="headerlink" title="2022-11-15"></a>2022-11-15</h2><h3 id="1-Windows下出现-Multiprocessing-error-without-if-clause-protection"><a href="#1-Windows下出现-Multiprocessing-error-without-if-clause-protection" class="headerlink" title="1. Windows下出现 Multiprocessing error without if-clause protection"></a>1. Windows下出现 Multiprocessing error without if-clause protection</h3><h4 id="该问题是怎么引起的？"><a href="#该问题是怎么引起的？" class="headerlink" title="该问题是怎么引起的？"></a>该问题是怎么引起的？</h4><p>在Windows操作系统下测试Keras <a href="https://keras.io/examples/nlp/question_answering/">Question Answering with Hugging Face Transformers</a>的时候，在运行如下代码时程序无法继续运行<br></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">tokenized_datasets <span class="token operator">=</span> datasets<span class="token punctuation">.</span><span class="token builtin">map</span><span class="token punctuation">(</span>    prepare_train_features<span class="token punctuation">,</span>    batched<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>    remove_columns<span class="token operator">=</span>datasets<span class="token punctuation">[</span><span class="token string">"train"</span><span class="token punctuation">]</span><span class="token punctuation">.</span>column_names<span class="token punctuation">,</span>    num_proc<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p></p><h4 id="报错信息"><a href="#报错信息" class="headerlink" title="报错信息"></a>报错信息</h4><p>通过查看VSCode的OUTPUT输出信息后，出现如下报错信息<br></p><pre class="line-numbers language-none"><code class="language-none">RuntimeError:       An attempt has been made to start a new process before the       current process has finished its bootstrapping phase.   This probably means that you are not using fork to start your   child processes and you have forgotten to use the proper idiom   in the main module:       if __name__ == '__main__':           freeze_support()           ...   The "freeze_support()" line can be omitted if the program   is not going to be frozen to produce an executable.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p></p><h4 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h4><p>该问题和Windows下multiprocessing的实现有关，根据这篇<a href="https://pytorch.org/docs/stable/notes/windows.html#multiprocessing-error-without-if-clause-protection">文档</a>，我们需要将包含<br><code>tokenized_datasets = datasets.map(    prepare_train_features,    batched=True,    remove_columns=datasets["train"].column_names,    num_proc=3,)</code><br>的代码封装成一个函数，具体如下<br></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment">#前面的代码</span>    tokenized_datasets <span class="token operator">=</span> datasets<span class="token punctuation">.</span><span class="token builtin">map</span><span class="token punctuation">(</span>        prepare_train_features<span class="token punctuation">,</span>        batched<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>        remove_columns<span class="token operator">=</span>datasets<span class="token punctuation">[</span><span class="token string">"train"</span><span class="token punctuation">]</span><span class="token punctuation">.</span>column_names<span class="token punctuation">,</span>        num_proc<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span>    <span class="token punctuation">)</span>    <span class="token comment">#后面的代码</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    main<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p></p>]]></content>
      
      
      <categories>
          
          <category> Tensorflow </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Tensorflow </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/hello-world/"/>
      <url>/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Linux下Docker安装JupterLab</title>
      <link href="/linux-xia-docker-an-zhuang-jupterlab/"/>
      <url>/linux-xia-docker-an-zhuang-jupterlab/</url>
      
        <content type="html"><![CDATA[<h2 id="Linux下Docker安装JupterLab"><a href="#Linux下Docker安装JupterLab" class="headerlink" title="Linux下Docker安装JupterLab"></a><strong>Linux下Docker安装JupterLab</strong></h2><h1 id="拉取docker镜像"><a href="#拉取docker镜像" class="headerlink" title="拉取docker镜像"></a>拉取docker镜像</h1><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> pull jupyter/base-notebook:latest<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><a href="https://jupyter-docker-stacks.readthedocs.io/en/latest/using/selecting.html">https://jupyter-docker-stacks.readthedocs.io/en/latest/using/selecting.html</a></p><h2 id="启动参数"><a href="#启动参数" class="headerlink" title="启动参数"></a>启动参数</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token punctuation">\</span>    <span class="token parameter variable">--user</span> root <span class="token punctuation">\</span><span class="token parameter variable">-p</span> <span class="token number">9510</span>:8888 <span class="token punctuation">\</span><span class="token parameter variable">-e</span> <span class="token assign-left variable">JUPYTER_ENABLE_LAB</span><span class="token operator">=</span>yes <span class="token punctuation">\</span>    <span class="token parameter variable">-v</span> /home/hp/jupyter:/home/jovyan/work <span class="token punctuation">\</span>    <span class="token parameter variable">--name</span> jupyter_lab <span class="token punctuation">\</span>    jupyter/minimal-notebook:latest <span class="token punctuation">\</span>    start-notebook.sh <span class="token punctuation">\</span>    <span class="token parameter variable">--NotebookApp.password</span><span class="token operator">=</span><span class="token string">'argon2:$argon2id$v=19$m=10240,t=10,p=8$mc/yVgXn0YmLqw13rdzb2w$XECu8Nua+gs9o1kY2hkFpWoyMeYBgfIzr72nkHRFAh4'</span> <span class="token punctuation">\</span>    <span class="token parameter variable">--NotebookApp.allow_password_change</span><span class="token operator">=</span>False <span class="token punctuation">\</span>    <span class="token parameter variable">--NotebookApp.allow_remote_access</span><span class="token operator">=</span>True <span class="token punctuation">\</span>    <span class="token parameter variable">--NotebookApp.open_browser</span><span class="token operator">=</span>False <span class="token punctuation">\</span>    <span class="token parameter variable">--NotebookApp.notebook_dir</span><span class="token operator">=</span><span class="token string">"/home/jovyan/work"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>NotebookApp.password 后面不是跟的明文，需要运行下面两行Python代码设置之后，复制返回值</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">from notebook.auth <span class="token function">import</span> <span class="token function">passwd</span>passwd<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="修改容器内部pip的镜像地址"><a href="#修改容器内部pip的镜像地址" class="headerlink" title="修改容器内部pip的镜像地址"></a>修改容器内部pip的镜像地址</h2><h3 id="Linux系统："><a href="#Linux系统：" class="headerlink" title="Linux系统："></a>Linux系统：</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>global<span class="token punctuation">]</span>index-url <span class="token operator">=</span> https://pypi.tuna.tsinghua.edu.cn/simple<span class="token punctuation">[</span>install<span class="token punctuation">]</span>trusted-host<span class="token operator">=</span>http://mirrors.aliyun.com<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="JupyterLab中配置Git"><a href="#JupyterLab中配置Git" class="headerlink" title="JupyterLab中配置Git"></a>JupyterLab中配置Git</h2><h2 id="出现的问题"><a href="#出现的问题" class="headerlink" title="出现的问题"></a>出现的问题</h2><p>1.新建文件夹时出现:Permission denied: Untitled Folder</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">chmod</span> <span class="token number">777</span> jupyter <span class="token parameter variable">-R</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Docker </tag>
            
            <tag> JupterLab </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python虚拟环境管理</title>
      <link href="/python-xu-ni-huan-jing-guan-li/"/>
      <url>/python-xu-ni-huan-jing-guan-li/</url>
      
        <content type="html"><![CDATA[<h1 id="Python虚拟环境管理"><a href="#Python虚拟环境管理" class="headerlink" title="Python虚拟环境管理"></a>Python虚拟环境管理</h1><h2 id="1-安装"><a href="#1-安装" class="headerlink" title="1.安装"></a>1.安装</h2><p>python3.6及以上已经默认安装，python3.5需要通过系统的包管理工具安装：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> python3-venv<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="2-创建虚拟环境"><a href="#2-创建虚拟环境" class="headerlink" title="2.创建虚拟环境"></a>2.创建虚拟环境</h2><p>选择一个合适的文件夹(如~/test_env)，使用如下命令创建一个虚拟环境test_env</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">python3 <span class="token parameter variable">-m</span> venv test_env<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="3-启用虚拟环境"><a href="#3-启用虚拟环境" class="headerlink" title="3.启用虚拟环境"></a>3.启用虚拟环境</h2><p>在Linux和Mac环境下，执行下面的命令：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">source</span> ~/test_env/bin/activate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在Windows环境下，执行下面的命令:<br></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">.<span class="token punctuation">\</span>test_env<span class="token punctuation">\</span>bin<span class="token punctuation">\</span>activate.bat<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p></p><h2 id="4-退出虚拟环境"><a href="#4-退出虚拟环境" class="headerlink" title="4.退出虚拟环境"></a>4.退出虚拟环境</h2><p>退出虚拟的python环境，在命令行执行下面的命令即可：<br></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">deactivate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p></p><h2 id="5-删除虚拟环境"><a href="#5-删除虚拟环境" class="headerlink" title="5.删除虚拟环境"></a>5.删除虚拟环境</h2><p>直接删除虚拟环境所在文件夹即可</p><h2 id="6-VSCode中切换虚拟环境运行"><a href="#6-VSCode中切换虚拟环境运行" class="headerlink" title="6.VSCode中切换虚拟环境运行"></a>6.VSCode中切换虚拟环境运行</h2><p>使用vscode的python environments插件进行切换即可</p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>堆排序(Heap Sort)</title>
      <link href="/xiao-xiao-suan-fa/dui-pai-xu-heap-sort/"/>
      <url>/xiao-xiao-suan-fa/dui-pai-xu-heap-sort/</url>
      
        <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><blockquote><p>堆排序是利用堆这种数据结构而设计的一种排序算法，是一种选择排序。<br>二叉堆是一个完全二叉树，即除了最后一层外，其余层都是满的，且最后一层是从左向右填充的。若用数组A[0..A.length-1]表示堆，则节点A[i]的左节点为A[2i+1]，右节点为A[2i+2]，父节点为<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="10.709ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 4733.4 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="230A" d="M174 734Q174 735 175 737T177 740T180 744T184 747T189 749T196 750Q206 748 214 735V-210H310H373Q401 -210 411 -213T422 -230T411 -247T369 -251Q362 -251 338 -251T298 -250H190Q178 -246 174 -234V734Z"></path></g><g data-mml-node="mo" transform="translate(444,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(833,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(1400.2,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(2400.4,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(2900.4,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(3289.4,0)"><g data-mml-node="mo"><path data-c="2F" d="M423 750Q432 750 438 744T444 730Q444 725 271 248T92 -240Q85 -250 75 -250Q68 -250 62 -245T56 -231Q56 -221 230 257T407 740Q411 750 423 750Z"></path></g></g><g data-mml-node="mn" transform="translate(3789.4,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mo" transform="translate(4289.4,0)"><path data-c="230B" d="M229 734Q229 735 230 737T232 740T235 744T239 747T244 749T251 750Q262 748 269 735V-235Q266 -240 256 -249L147 -250H77Q43 -250 32 -247T21 -230T32 -213T72 -209Q79 -209 99 -209T133 -210H229V734Z"></path></g></g></g></svg></mjx-container><br>二叉堆有两种：最大堆和最小堆。对于最大堆：A[i]&gt;=A[2i+1]且A[i]&gt;=A[2i+2]；对于最小堆:A[i]&lt;=A[2i+1]且A[i]&lt;=A[2i+2]；</p></blockquote><h2 id="算法步骤（升序）"><a href="#算法步骤（升序）" class="headerlink" title="算法步骤（升序）"></a>算法步骤（升序）</h2><ol><li>构造初始堆。将给定的无序序列构造成一个大顶堆（升序用大顶，降序用小顶堆）</li><li>将堆顶元素与末尾元素进行交换，使末尾元素最大。然后继续调整堆，再将堆顶元素与末尾元素交换，得到第二大元素</li><li>重新调整结构，使其满足堆定义，然后继续交换堆顶元素与当前末尾元素（保持当前末尾元素及之后的元素有序）</li><li>如此反复，直到整个序列有序</li></ol><h2 id="Python代码实现"><a href="#Python代码实现" class="headerlink" title="Python代码实现"></a>Python代码实现</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">heapify</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span>root<span class="token punctuation">,</span>end<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>        child <span class="token operator">=</span> <span class="token number">2</span><span class="token operator">*</span>root<span class="token operator">+</span><span class="token number">1</span> <span class="token comment"># 左节点的位置</span>        <span class="token keyword">if</span> child<span class="token operator">&gt;</span>end<span class="token punctuation">:</span> <span class="token comment"># 左节点在末尾节点之外</span>            <span class="token keyword">break</span>        <span class="token keyword">if</span> child<span class="token operator">+</span><span class="token number">1</span><span class="token operator">&lt;=</span>end <span class="token keyword">and</span> arr<span class="token punctuation">[</span>child<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">&gt;</span>arr<span class="token punctuation">[</span>child<span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token comment"># 右节点在末尾节点之内，选择左右节点较大者的索引</span>            child<span class="token operator">+=</span><span class="token number">1</span>        <span class="token keyword">if</span> arr<span class="token punctuation">[</span>child<span class="token punctuation">]</span><span class="token operator">&gt;</span>arr<span class="token punctuation">[</span>root<span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token comment"># 三个节点的最大值放在根节点</span>            arr<span class="token punctuation">[</span>child<span class="token punctuation">]</span><span class="token punctuation">,</span>arr<span class="token punctuation">[</span>root<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>root<span class="token punctuation">]</span><span class="token punctuation">,</span>arr<span class="token punctuation">[</span>child<span class="token punctuation">]</span>            root <span class="token operator">=</span> child   <span class="token comment"># 因为孩子节点的值改变了，所以需要调整该节点往下的堆</span>        <span class="token keyword">else</span><span class="token punctuation">:</span> <span class="token comment"># 根节点已经是最大值，即已经满足最大堆性质</span>            <span class="token keyword">break</span><span class="token keyword">def</span> <span class="token function">heap_sort</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">:</span>    n <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span>    first_root <span class="token operator">=</span> n<span class="token operator">//</span><span class="token number">2</span><span class="token operator">-</span><span class="token number">1</span> <span class="token comment"># 找到最深最后的那个根节点的位置</span>    <span class="token keyword">for</span> root <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>first_root<span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        build<span class="token punctuation">(</span>arr<span class="token punctuation">,</span>root<span class="token punctuation">,</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> end <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>arr<span class="token punctuation">[</span>end<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>end<span class="token punctuation">]</span><span class="token punctuation">,</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        build<span class="token punctuation">(</span>arr<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>end<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h2><h3 id="TopK问题（找出前K小的数）"><a href="#TopK问题（找出前K小的数）" class="headerlink" title="TopK问题（找出前K小的数）"></a>TopK问题（找出前K小的数）</h3><p>维护一个大小为K的大顶堆，依次将数据放入堆中，当堆满了之后，只需要将堆顶的元素与下一个数比较：</p><ul><li>如果大于堆顶元素，则直接忽略，比较下一个元素</li><li>如果小于堆顶元素，将该元素与堆顶元素交换，然后重新建立最大堆</li><li>重复上面步骤直到全部元素遍历完</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">topk</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>k<span class="token punctuation">)</span><span class="token punctuation">:</span>    heap <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> item <span class="token keyword">in</span> a<span class="token punctuation">[</span><span class="token punctuation">:</span>k<span class="token punctuation">]</span><span class="token punctuation">:</span>        heap<span class="token punctuation">.</span>append<span class="token punctuation">(</span>item<span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>heap<span class="token punctuation">)</span><span class="token operator">&lt;=</span>k<span class="token punctuation">:</span>        <span class="token keyword">return</span> heap    heapify<span class="token punctuation">(</span>heap<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>k<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> item <span class="token keyword">in</span> a<span class="token punctuation">[</span>k<span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> item<span class="token operator">&gt;</span>heap<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">:</span>            <span class="token keyword">continue</span>        heap<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> item        heapify<span class="token punctuation">(</span>heap<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>k<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> heap<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 小小算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 排序算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《动手学深度学习-PyTorch版》读书笔记</title>
      <link href="/dong-shou-xue-shen-du-xue-xi-pytorch-ban-du-shu-bi-ji/"/>
      <url>/dong-shou-xue-shen-du-xue-xi-pytorch-ban-du-shu-bi-ji/</url>
      
        <content type="html"><![CDATA[<h2 id="第十三章-计算机视觉"><a href="#第十三章-计算机视觉" class="headerlink" title="第十三章 计算机视觉"></a>第十三章 计算机视觉</h2><h3 id="13-8-区域卷积神经网络-R-CNN-系列"><a href="#13-8-区域卷积神经网络-R-CNN-系列" class="headerlink" title="13.8 区域卷积神经网络(R-CNN)系列"></a>13.8 区域卷积神经网络(R-CNN)系列</h3><h4 id="R-CNN的基本原理"><a href="#R-CNN的基本原理" class="headerlink" title="R-CNN的基本原理"></a>R-CNN的基本原理</h4><h4 id="R-CNN的具体步骤"><a href="#R-CNN的具体步骤" class="headerlink" title="R-CNN的具体步骤"></a>R-CNN的具体步骤</h4><h4 id="Fast-R-CNN的兴趣区域汇聚层-RoI-Pooling"><a href="#Fast-R-CNN的兴趣区域汇聚层-RoI-Pooling" class="headerlink" title="Fast R-CNN的兴趣区域汇聚层(RoI Pooling)"></a>Fast R-CNN的兴趣区域汇聚层(RoI Pooling)</h4><h3 id="13-10-转置卷积"><a href="#13-10-转置卷积" class="headerlink" title="13.10 转置卷积"></a>13.10 转置卷积</h3><h4 id="转置卷积的作用"><a href="#转置卷积的作用" class="headerlink" title="转置卷积的作用"></a>转置卷积的作用</h4><p>转置卷积用于逆转下采样导致的空间维度减小</p><h4 id="用什么方法初始化转置卷积层"><a href="#用什么方法初始化转置卷积层" class="headerlink" title="用什么方法初始化转置卷积层"></a>用什么方法初始化转置卷积层</h4><p>双线性插值</p>]]></content>
      
      
      <categories>
          
          <category> 读书笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PyTorch </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>用docker在服务器上部署sharelatex</title>
      <link href="/yong-docker-zai-fu-wu-qi-shang-bu-shu-sharelatex/"/>
      <url>/yong-docker-zai-fu-wu-qi-shang-bu-shu-sharelatex/</url>
      
        <content type="html"><![CDATA[<h1 id="重新打包sharelatex的docker镜像"><a href="#重新打包sharelatex的docker镜像" class="headerlink" title="重新打包sharelatex的docker镜像"></a>重新打包sharelatex的docker镜像</h1><p>参考官方给出的docker-compose.yaml文件。但是直接docker-compose，并不能排版中文，原因是缺少xelatex相关包。但在docker容器中，安装包并不方便。这里直接以原始sharelatex的docker镜像为基础生成新的docker镜像。</p><p>在新的docker镜像中会安装texlive的更新，并且将xelatex相关包添加到环境变量中去。对应的Dockerfile：<br></p><pre class="line-numbers language-none"><code class="language-none">FROM sharelatex/sharelatexRUN tlmgr option repository https://mirrors.tuna.tsinghua.edu.cn/CTAN/systems/texlive/tlnetRUN tlmgr update --self --allRUN tlmgr install scheme-fullRUN echo '$#! /bin/bash\npushd /usr/local/bin\nfor f in `ls /usr/local/texlive/2023/bin/x86_64-linux`\ndo\n[ -f $f ] || ln -s /usr/local/texlive/2023/bin/x86_64-linux/$f $f\ndone' &gt; /overleaf/link.shRUN cat /overleaf/link.shRUN chmod +x /overleaf/link.shRUN bash /overleaf/link.shWORKDIR /ENTRYPOINT ["/sbin/my_init"]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br>在保存Dockerfile的文件夹下，运行docker build生成新的docker镜像：<br><pre class="line-numbers language-none"><code class="language-none">build --tag chinglin/sharelatex:latest --progress=plain . 2&gt;&amp;1 | tee build.log<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p></p><h1 id="docker-compose运行"><a href="#docker-compose运行" class="headerlink" title="docker compose运行"></a>docker compose运行</h1><p>修改官方的docker-compose.yml文件后的文件如下：<br></p><pre class="line-numbers language-none"><code class="language-none">version: '2.2'services:    sharelatex:        restart: always        # Server Pro users:        # image: quay.io/sharelatex/sharelatex-pro        image: hp/sharelatex        container_name: sharelatex        depends_on:            mongo:                condition: service_healthy            redis:                condition: service_started        ports:            - 2080:80        links:            - mongo            - redis        stop_grace_period: 60s        volumes:            - ./sharelatex/sharelatex_data:/var/lib/sharelatex            ########################################################################            ####  Server Pro: Uncomment the following line to mount the docker  ####            ####             socket, required for Sibling Containers to work    ####            ########################################################################            # - /var/run/docker.sock:/var/run/docker.sock        environment:            SHARELATEX_APP_NAME: Overleaf Community Edition            SHARELATEX_MONGO_URL: mongodb://mongo/sharelatex            # Same property, unfortunately with different names in            # different locations            SHARELATEX_REDIS_HOST: redis            REDIS_HOST: redis            ENABLED_LINKED_FILE_TYPES: 'project_file,project_output_file'            # Enables Thumbnail generation using ImageMagick            ENABLE_CONVERSIONS: 'true'            # Disables email confirmation requirement            EMAIL_CONFIRMATION_DISABLED: 'true'            # temporary fix for LuaLaTex compiles            # see https://github.com/overleaf/overleaf/issues/695            TEXMFVAR: /var/lib/sharelatex/tmp/texmf-var            ## Set for SSL via nginx-proxy            #VIRTUAL_HOST: 103.112.212.22            # SHARELATEX_SITE_URL: http://sharelatex.mydomain.com            # SHARELATEX_NAV_TITLE: Our ShareLaTeX Instance            # SHARELATEX_HEADER_IMAGE_URL: http://somewhere.com/mylogo.png            # SHARELATEX_ADMIN_EMAIL: support@it.com            # SHARELATEX_LEFT_FOOTER: '[{"text": "Powered by &lt;a href=\"https://www.sharelatex.com\"&gt;ShareLaTeX&lt;/a&gt; 2016"},{"text": "Another page I want to link to can be found &lt;a href=\"here\"&gt;here&lt;/a&gt;"} ]'            # SHARELATEX_RIGHT_FOOTER: '[{"text": "Hello I am on the Right"} ]'            # SHARELATEX_EMAIL_FROM_ADDRESS: "team@sharelatex.com"            # SHARELATEX_EMAIL_AWS_SES_ACCESS_KEY_ID:            # SHARELATEX_EMAIL_AWS_SES_SECRET_KEY:            # SHARELATEX_EMAIL_SMTP_HOST: smtp.mydomain.com            # SHARELATEX_EMAIL_SMTP_PORT: 587            # SHARELATEX_EMAIL_SMTP_SECURE: false            # SHARELATEX_EMAIL_SMTP_USER:            # SHARELATEX_EMAIL_SMTP_PASS:            # SHARELATEX_EMAIL_SMTP_TLS_REJECT_UNAUTH: true            # SHARELATEX_EMAIL_SMTP_IGNORE_TLS: false            # SHARELATEX_EMAIL_SMTP_NAME: '127.0.0.1'            # SHARELATEX_EMAIL_SMTP_LOGGER: true            # SHARELATEX_CUSTOM_EMAIL_FOOTER: "This system is run by department x"            # ENABLE_CRON_RESOURCE_DELETION: true            ################            ## Server Pro ##            ################            # SANDBOXED_COMPILES: 'true'            # SANDBOXED_COMPILES_SIBLING_CONTAINERS: 'true'            # SANDBOXED_COMPILES_HOST_DIR: '/var/sharelatex_data/data/compiles'            # DOCKER_RUNNER: 'false'            ## Works with test LDAP server shown at bottom of docker compose            # SHARELATEX_LDAP_URL: 'ldap://ldap:389'            # SHARELATEX_LDAP_SEARCH_BASE: 'ou=people,dc=planetexpress,dc=com'            # SHARELATEX_LDAP_SEARCH_FILTER: '(uid={{username}})'            # SHARELATEX_LDAP_BIND_DN: 'cn=admin,dc=planetexpress,dc=com'            # SHARELATEX_LDAP_BIND_CREDENTIALS: 'GoodNewsEveryone'            # SHARELATEX_LDAP_EMAIL_ATT: 'mail'            # SHARELATEX_LDAP_NAME_ATT: 'cn'            # SHARELATEX_LDAP_LAST_NAME_ATT: 'sn'            # SHARELATEX_LDAP_UPDATE_USER_DETAILS_ON_LOGIN: 'true'            # SHARELATEX_TEMPLATES_USER_ID: "578773160210479700917ee5"            # SHARELATEX_NEW_PROJECT_TEMPLATE_LINKS: '[ {"name":"All Templates","url":"/templates/all"}]'            # SHARELATEX_PROXY_LEARN: "true"    mongo:        restart: always        image: mongo:4.4        container_name: mongo        expose:            - 27017        volumes:            - ./mongo/mongo_data:/data/db        healthcheck:            test: echo 'db.stats().ok' | mongo localhost:27017/test --quiet            interval: 10s            timeout: 10s            retries: 5    redis:        restart: always        image: redis:6.2        container_name: redis        expose:            - 6379        volumes:            - ./redis/redis_data:/data    # ldap:    #    restart: always    #    image: rroemhild/test-openldap    #    container_name: ldap    #    expose:    #        - 389    # See https://github.com/jwilder/nginx-proxy for documentation on how to configure the nginx-proxy container,    # and https://github.com/overleaf/overleaf/wiki/HTTPS-reverse-proxy-using-Nginx for an example of some recommended    # settings. We recommend using a properly managed nginx instance outside of the Overleaf Server Pro setup,    # but the example here can be used if you'd prefer to run everything with docker-compose    # nginx-proxy:    #     image: jwilder/nginx-proxy    #     container_name: nginx-proxy    #     ports:    #       #- "80:80"    #       - "443:443"    #     volumes:    #       - /var/run/docker.sock:/tmp/docker.sock:ro    #       - /home/sharelatex/tmp:/etc/nginx/certs<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p></p><h2 id="Mongdb报错问题"><a href="#Mongdb报错问题" class="headerlink" title="Mongdb报错问题"></a>Mongdb报错问题</h2><p>参考 <a href="https://github.com/overleaf/overleaf/wiki/Release-Notes--4.x.x">https://github.com/overleaf/overleaf/wiki/Release-Notes--4.x.x</a></p><h3 id="Manually-setting-up-MongoDB-as-a-replica-set"><a href="#Manually-setting-up-MongoDB-as-a-replica-set" class="headerlink" title="Manually setting up MongoDB as a replica set"></a>Manually setting up MongoDB as a replica set</h3><p>The following instructions are not necessary if you use the Overleaf Toolkit or if you use an external Mongo database already configured as a replica set.</p><p>If you run MongoDB with docker-compose, add the following command to the mongo container configuration:<br></p><pre class="line-numbers language-none"><code class="language-none">mongo:    command: "--replSet overleaf"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><br>Restart the mongo container then start a mongo shell with docker-compose exec -it mongo mongo. In that shell, run the following command to initiate the replica set:<br><pre class="line-numbers language-none"><code class="language-none">rs.initiate({ _id: "overleaf", members: [ { _id: 0, host: "mongo:27017" } ] })<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p></p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><a href="https://zhuanlan.zhihu.com/p/367416542">https://zhuanlan.zhihu.com/p/367416542</a></li><li><a href="https://github.com/overleaf/overleaf/blob/main/docker-compose.yml">https://github.com/overleaf/overleaf/blob/main/docker-compose.yml</a></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>决策树与随机森林</title>
      <link href="/jue-ce-shu-yu-sui-ji-sen-lin/"/>
      <url>/jue-ce-shu-yu-sui-ji-sen-lin/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
